/* ../svelte_template/channel_attr.html generated by Svelte v1.64.1 */
var channel_attr = (function() { "use strict";

	function range(n){
  return Array(n).fill().map((_, i) => i);
}

function data() {
  return {
    spritemap_url: "",
    sprite_size: 110,
    sprite_n_wrap: 22,
    attrsPos: [],
    attrsNeg: [],
  };
};

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-j99wfd-style';
		style.textContent = ".svelte-j99wfd.entry,.svelte-j99wfd .entry{float:left;margin-right:4px}.svelte-j99wfd.gap,.svelte-j99wfd .gap{float:left;margin:8px;font-size:400%}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var div, div_1, text, text_1, div_2, text_3, text_5, br;

		var each_value = state.attrsPos;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, assign(assign({}, state), {
				each_value: each_value,
				attr: each_value[i],
				attr_index: i
			}));
		}

		var if_block = (state.attrsPos.length > 5) && create_if_block(component, state);

		var each_value_1 = state.attrsNeg;

		var each_1_blocks = [];

		for (var i = 0; i < each_value_1.length; i += 1) {
			each_1_blocks[i] = create_each_block_1(component, assign(assign({}, state), {
				each_value_1: each_value_1,
				attr: each_value_1[i],
				attr_index_1: i
			}));
		}

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text = createText("\n    ");
				if (if_block) if_block.c();
				text_1 = createText("\n    ");
				div_2 = createElement("div");
				div_2.textContent = "...";
				text_3 = createText("\n    ");

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].c();
				}

				text_5 = createText("\n  ");
				br = createElement("br");
				this.h();
			},

			h: function hydrate() {
				div_2.className = "gap";
				div_1.className = "channel_list";
				setStyle(br, "clear", "both");
				div.className = "figure svelte-j99wfd";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div_1, null);
				}

				appendNode(text, div_1);
				if (if_block) if_block.m(div_1, null);
				appendNode(text_1, div_1);
				appendNode(div_2, div_1);
				appendNode(text_3, div_1);

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].m(div_1, null);
				}

				appendNode(text_5, div);
				appendNode(br, div);
			},

			p: function update(changed, state) {
				var each_value = state.attrsPos;

				if (changed.spritemap_url || changed.sprite_size || changed.attrsPos || changed.sprite_n_wrap || changed.Math) {
					for (var i = 0; i < each_value.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value: each_value,
							attr: each_value[i],
							attr_index: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(div_1, text);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}

				if (state.attrsPos.length > 5) {
					if (!if_block) {
						if_block = create_if_block(component, state);
						if_block.c();
						if_block.m(div_1, text_1);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				var each_value_1 = state.attrsNeg;

				if (changed.spritemap_url || changed.sprite_size || changed.attrsNeg || changed.sprite_n_wrap || changed.Math) {
					for (var i = 0; i < each_value_1.length; i += 1) {
						var each_1_context = assign(assign({}, state), {
							each_value_1: each_value_1,
							attr: each_value_1[i],
							attr_index_1: i
						});

						if (each_1_blocks[i]) {
							each_1_blocks[i].p(changed, each_1_context);
						} else {
							each_1_blocks[i] = create_each_block_1(component, each_1_context);
							each_1_blocks[i].c();
							each_1_blocks[i].m(div_1, null);
						}
					}

					for (; i < each_1_blocks.length; i += 1) {
						each_1_blocks[i].u();
						each_1_blocks[i].d();
					}
					each_1_blocks.length = each_value_1.length;
				}
			},

			u: function unmount() {
				detachNode(div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				if (if_block) if_block.u();

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].u();
				}
			},

			d: function destroy() {
				destroyEach(each_blocks);

				if (if_block) if_block.d();

				destroyEach(each_1_blocks);
			}
		};
	}

	// (3:4) {{#each attrsPos as attr}}
	function create_each_block(component, state) {
		var attr = state.attr, each_value = state.each_value, attr_index = state.attr_index;
		var div, div_1, text, div_2, text_1_value = attr.v, text_1;

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				text = createText("\n      ");
				div_2 = createElement("div");
				text_1 = createText(text_1_value);
				this.h();
			},

			h: function hydrate() {
				div_1.className = "sprite";
				setStyle(div_1, "background-image", "url(" + state.spritemap_url + ")");
				setStyle(div_1, "width", "" + state.sprite_size + "px");
				setStyle(div_1, "height", "" + state.sprite_size + "px");
				setStyle(div_1, "background-position", "-" + state.sprite_size*(attr.n%state.sprite_n_wrap) + "px -" + state.sprite_size*state.Math.floor(attr.n/state.sprite_n_wrap) + "px");
				div_2.className = "value";
				setStyle(div_2, "background-color", "hsl(" + ( (attr.v > 0)? 210 : 0 ) + ", " + 100*state.Math.abs(attr.v)/1.8 + "%, " + ( 100-30*state.Math.abs(attr.v)/1.8 ) + "%)");
				div.className = "entry";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(text, div);
				appendNode(div_2, div);
				appendNode(text_1, div_2);
			},

			p: function update(changed, state) {
				attr = state.attr;
				each_value = state.each_value;
				attr_index = state.attr_index;
				if (changed.spritemap_url) {
					setStyle(div_1, "background-image", "url(" + state.spritemap_url + ")");
				}

				if (changed.sprite_size) {
					setStyle(div_1, "width", "" + state.sprite_size + "px");
					setStyle(div_1, "height", "" + state.sprite_size + "px");
				}

				if (changed.sprite_size || changed.attrsPos || changed.sprite_n_wrap || changed.Math) {
					setStyle(div_1, "background-position", "-" + state.sprite_size*(attr.n%state.sprite_n_wrap) + "px -" + state.sprite_size*state.Math.floor(attr.n/state.sprite_n_wrap) + "px");
				}

				if ((changed.attrsPos) && text_1_value !== (text_1_value = attr.v)) {
					text_1.data = text_1_value;
				}

				if (changed.attrsPos || changed.Math) {
					setStyle(div_2, "background-color", "hsl(" + ( (attr.v > 0)? 210 : 0 ) + ", " + 100*state.Math.abs(attr.v)/1.8 + "%, " + ( 100-30*state.Math.abs(attr.v)/1.8 ) + "%)");
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (9:4) {{#if attrsPos.length > 5}}
	function create_if_block(component, state) {
		var br, text, br_1;

		return {
			c: function create() {
				br = createElement("br");
				text = createText("\n    ");
				br_1 = createElement("br");
				this.h();
			},

			h: function hydrate() {
				setStyle(br, "clear", "both");
				setStyle(br_1, "clear", "both");
			},

			m: function mount(target, anchor) {
				insertNode(br, target, anchor);
				insertNode(text, target, anchor);
				insertNode(br_1, target, anchor);
			},

			u: function unmount() {
				detachNode(br);
				detachNode(text);
				detachNode(br_1);
			},

			d: noop
		};
	}

	// (14:4) {{#each attrsNeg as attr}}
	function create_each_block_1(component, state) {
		var attr = state.attr, each_value_1 = state.each_value_1, attr_index_1 = state.attr_index_1;
		var div, div_1, text, div_2, text_1_value = attr.v, text_1;

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				text = createText("\n      ");
				div_2 = createElement("div");
				text_1 = createText(text_1_value);
				this.h();
			},

			h: function hydrate() {
				div_1.className = "sprite";
				setStyle(div_1, "background-image", "url(" + state.spritemap_url + ")");
				setStyle(div_1, "width", "" + state.sprite_size + "px");
				setStyle(div_1, "height", "" + state.sprite_size + "px");
				setStyle(div_1, "background-position", "-" + state.sprite_size*(attr.n%state.sprite_n_wrap) + "px -" + state.sprite_size*state.Math.floor(attr.n/state.sprite_n_wrap) + "px");
				div_2.className = "value";
				setStyle(div_2, "background-color", "hsl(" + ( (attr.v > 0)? 210 : 0 ) + ", " + 100*state.Math.abs(attr.v)/1.8 + "%, " + ( 100-30*state.Math.abs(attr.v)/1.8 ) + "%)");
				div.className = "entry";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(text, div);
				appendNode(div_2, div);
				appendNode(text_1, div_2);
			},

			p: function update(changed, state) {
				attr = state.attr;
				each_value_1 = state.each_value_1;
				attr_index_1 = state.attr_index_1;
				if (changed.spritemap_url) {
					setStyle(div_1, "background-image", "url(" + state.spritemap_url + ")");
				}

				if (changed.sprite_size) {
					setStyle(div_1, "width", "" + state.sprite_size + "px");
					setStyle(div_1, "height", "" + state.sprite_size + "px");
				}

				if (changed.sprite_size || changed.attrsNeg || changed.sprite_n_wrap || changed.Math) {
					setStyle(div_1, "background-position", "-" + state.sprite_size*(attr.n%state.sprite_n_wrap) + "px -" + state.sprite_size*state.Math.floor(attr.n/state.sprite_n_wrap) + "px");
				}

				if ((changed.attrsNeg) && text_1_value !== (text_1_value = attr.v)) {
					text_1.data = text_1_value;
				}

				if (changed.attrsNeg || changed.Math) {
					setStyle(div_2, "background-color", "hsl(" + ( (attr.v > 0)? 210 : 0 ) + ", " + 100*state.Math.abs(attr.v)/1.8 + "%, " + ( 100-30*state.Math.abs(attr.v)/1.8 ) + "%)");
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	function channel_attr(options) {
		init(this, options);
		this._state = assign(assign({ Math : Math }, data()), options.data);

		if (!document.getElementById("svelte-j99wfd-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(channel_attr.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	channel_attr.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function noop() {}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				handler.__calling = true;
				handler.call(this, data);
				handler.__calling = false;
			}
		}
	}

	function observe(key, callback, options) {
		var fn = callback.bind(this);

		if (!options || options.init !== false) {
			fn(this.get()[key], undefined);
		}

		return this.on(options && options.defer ? 'update' : 'state', function(event) {
			if (event.changed[key]) fn(event.current[key], event.previous && event.previous[key]);
		});
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}
	return channel_attr;
}());